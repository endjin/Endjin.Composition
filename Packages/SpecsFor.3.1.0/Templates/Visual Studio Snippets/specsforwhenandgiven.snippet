<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>SpecsFor When</Title>
			<Shortcut>whengiven</Shortcut>
			<Description>Generates a SpecsFor when class with its very own given class</Description>
			<Author>bradygaster</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>given</ID>
					<ToolTip>Defines the condition under which this Spec is assumed to run</ToolTip>
					<Default>the_car_is_stopped</Default>
				</Literal>
        <Literal>
          <ID>SUT</ID>
          <ToolTip>The system under test</ToolTip>
          <Default>Car</Default>
        </Literal>
        <Literal>
          <ID>expectedResult</ID>
          <ToolTip>The expected outcome given the condition</ToolTip>
          <Default>starts_the_engine</Default>
        </Literal>
			</Declarations>
			<Code Language="csharp">
        <![CDATA[public class $given$ : IContext<$SUT$>
{
	public void Initialize(ITestState<$SUT$> state)
	{
		// TODO: add initialization logic to set up the context
	}
}

[TestFixture]
public class when_$given$_$expectedResult$ : SpecsFor<$SUT$>
{
	protected override void When()
	{
		// TODO: perform logic using the system under test (SUT) property
	}

	protected override void Given()
	{
		Given<$given$>();
		base.Given();
	}

	[Test]
	public void then_$expectedResult$()
	{
		//TODO: write test to make sure everything is as it should be $end$
	}
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>